package monitor

import (
	"context"
	"time"
)

// Monitor defines the behavior of a monitor.
type Monitor interface {
	// Start initializes and begins the monitoring process using the provided context.
	Start(context.Context)

	// Stop halts the monitoring process using the provided context.
	Stop(context.Context)

	// SetCycle sets the interval duration between each monitoring cycle.
	SetCycle(time.Duration)

	// SetTimeout sets the timeout duration for the monitoring process.
	SetTimeout(time.Duration)

	// Subscribe returns a channel that emits alerts generated by the monitoring system.
	Subscribe() <-chan *Alert
}

// Alert represents an alert generated by the monitoring system.
type Alert struct {
	Ts       time.Time // The timestamp when the alert was generated
	Severity Severity  // The severity level of the alert (e.g., error, warning, info)
	Source   Source    // The source of the alert (e.g., internal, external)
	Err      error     // An error associated with the alert, if any
	Descr    string    // A description of the alert
	Payload  any       // Any additional payload data associated with the alert
}

// AlertRule defines a function type that processes a specific type of input and
// generates an alert if applicable.
type AlertRule[T any] func(*T) (*Alert, bool)

// InternalAlert creates an internal error alert with the given error.
func InternalAlert(err error) *Alert {
	return &Alert{
		Ts:       time.Now(),
		Severity: SeverityError,
		Source:   SourceInternal,
		Err:      err,
	}
}

// NewAlert creates a new alert with the specified severity, source, description, and payload.
func NewAlert(severity Severity, source Source, descr string, payload any) *Alert {
	return &Alert{
		Ts:       time.Now(),
		Severity: severity,
		Source:   source,
		Descr:    descr,
		Payload:  payload,
	}
}
